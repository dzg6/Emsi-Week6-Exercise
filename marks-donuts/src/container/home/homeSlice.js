import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchDonuts, updateDonut, createOrder, fetchOrders, refundOrder } from './homeAPI';

const initialState = {
  donuts: {},
  orders: {},
  status: 'idle',
};

// a redux tookit function called Thunk
// This initaites ansyc retrtieval of the donuts
// Read more at :
// https://redux-toolkit.js.org/api/createAsyncThunk
export const getDonuts = createAsyncThunk(
  'data/fetchDonuts',
  async (amount) => {
    const response = await fetchDonuts(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const postDonut = createAsyncThunk(
  'data/updateDonut',
  async (donut) => {
    const response = await updateDonut(donut);
    // The value we return becomes the `fulfilled` action payload

    return response.data;
  }
);
export const getOrders = createAsyncThunk(
  'data/fetchOrders',
  async (amount) => {
    const response = await fetchOrders(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const postOrder = createAsyncThunk(
  'data/createOrder',
  async (order) => {
    let response = await createOrder(order);
    // The value we return becomes the `fulfilled` action payload

    return response.data;
  }
);
export const postRefund = createAsyncThunk(
  'data/refundOrder',
  async (order) => {
    let response = await refundOrder(order);
    // The value we return becomes the `fulfilled` action payload

    return response.data;
  }
);

export const homeSlice = createSlice({
  name: 'data',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    inventoryUpdate: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.data = action.payload;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getDonuts.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getDonuts.fulfilled, (state, action) => {
        state.status = 'idle';
        state.donuts = action.payload;
      })
      .addCase(postDonut.pending, (state) => {
        state.status = 'loading';

      })
      .addCase(postDonut.fulfilled, (state, action) => {
        state.status = 'idle';
        state.donuts = action.payload;
      })
      .addCase(getOrders.pending, (state) => {
        state.status = 'loading';

      })
      .addCase(getOrders.fulfilled, (state, action) => {
        state.status = 'idle';
        state.orders = action.payload;
      })
      .addCase(postOrder.pending, (state) => {
        state.status = 'loading';

      })
      .addCase(postOrder.fulfilled, (state, action) => {
        state.status = 'idle';
        state.donuts = action.payload;
      })
      .addCase(postRefund.pending, (state) => {
        state.status = 'loading';

      })
      .addCase(postRefund.fulfilled, (state, action) => {
        state.status = 'idle';
        // state.orders = action.payload;
      });
  },
});

export const { inventoryUpdate, decrement, incrementByAmount } = homeSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectDonuts = (state) => state.data.donuts;
export const selectOrders = (state) => state.data.orders;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default homeSlice.reducer;
